import React, { useState, useEffect } from 'react'
import Sales from '../../component/contents/Sales'
import CompPredictSales from '../../component/contents/CompPredictSales'
import PredictSales from '../../component/contents/PredictSales'
import DivisionLine from '../../component/common/DivisionLine'
import BestMenu from '../../component/contents/BestMenu'
import NAVBAR from '../../component/common/Navbar'
import HEADER from '../../component/common/Header'
import BiggestDiffMenu from '../../component/contents/BiggestDiffMenu'
import TopButton from '../../component/common/TopButton'
import Loading from '../../component/common/Loading'
import Empty from '../../component/common/Empty'
import {
    useMonthSalesQuery,
    useMenuMonthSalesQuery,
    useMenuMonthDiffQuery,
    useMonthPredictQuery,
} from '../../services/sales/SalesApiSlice'
import {
    selectCurrentDateMonth,
    setIsNowState,
} from '../../services/date/dateSlice'
import { useDispatch, useSelector } from 'react-redux'
import Slider from '../../component/contents/Slider'
import PredictSalesError from '../../component/contents/PredictSalesError'
import CompPredictSalesError from '../../component/contents/CompPredictSalesError'
import getPreviousMonth from '../../function/getPreviousMonth'
const MonthReportPages = () => {
    const dispatch = useDispatch()
    // ÌòÑÏû¨ ÎÇ†Ïßú
    const realDate = new Date('2023-12-17')
    const prevMonth = getPreviousMonth(realDate)
    // ÏÑ†ÌÉùÎêú ÎÇ†Ïßú storeÏóêÏÑú Í∞ÄÏ†∏Ïò§Í∏∞
    const date = useSelector(selectCurrentDateMonth)

    // YYYY-MM-DD ÌòïÌÉúÎ°ú Î≥ÄÌôòÌïòÍ∏∞
    const [formattedDate, setFormattedDate] = useState(null)
    const [prevMonths, setprevMonths] = useState([])
    const [isNowDate, setisNowDate] = useState() // ÏÑ†ÌÉùÎêú ÎÇ†ÏßúÍ∞Ä ÌòÑÏû¨ ÎÇ†ÏßúÏù∏Í∞Ä
    const [lastWord, setlastWord] = useState()

    useEffect(() => {
        let selectedMonth
        const formattedDateStr = date.replace(
            /(\d{4})ÎÖÑ (\d{1,2})Ïõî/,
            function (match, year, month) {
                month = month.padStart(2, '0')
                const dayEnd = new Date(year, month, 0).getDate()
                selectedMonth = month
                return `${year}-${month}-01~${year}-${month}-${dayEnd}`
            },
        )
        setFormattedDate(formattedDateStr)

        // Ïù¥Ï†Ñ 4Í∞úÏõî Íµ¨ÌïòÍ∏∞
        const previousMonths = []
        for (let i = 4; i >= 1; i--) {
            if (selectedMonth - i <= 0) {
                previousMonths.push((selectedMonth - i + 12) % 13)
            } else {
                previousMonths.push(selectedMonth - i)
            }
        }
        setprevMonths(previousMonths)

        // Ìó§ÎçîÏóê ÏûàÎäî date Î¨∏ÏûêÏó¥ÏóêÏÑú ÎßàÏßÄÎßâ Îã®Ïñ¥Îßå Î∞õÏïÑÏôÄÏÑú salesÏóê ÎÑòÍ≤®Ï§å. Ïò§Îäò ÎÇ†ÏßúÏôÄ ÏÑ†ÌÉùÎêú ÎÇ†ÏßúÍ∞Ä Í∞ôÏùÑ Í≤ΩÏö∞ 'Ïù¥Î≤àÎã¨'ÏùÑ Î∞òÌôòÌï®
        const wordsArray = date.split(' ')
        if (prevMonth === date) {
            setisNowDate(true)
            dispatch(setIsNowState(true))
            setlastWord('Ïù¥Î≤àÎã¨')
        } else {
            setisNowDate(false)
            dispatch(setIsNowState(false))
            setlastWord(wordsArray[wordsArray.length - 1])
        }
    }, [date])

    // daily-sales Îç∞Ïù¥ÌÑ∞ Î∞õÏïÑÏò§Í∏∞
    const encodedDate = encodeURIComponent(date)
    const { data, isLoading, error } = useMonthSalesQuery(encodedDate)
    const {
        data: dataMenu,
        isLoading: isLoadingMenu,
        error: errorMenu,
    } = useMenuMonthSalesQuery(encodedDate)
    const {
        data: dataDiff,
        isLoading: isLoadingDiff,
        error: errorDiff,
    } = useMenuMonthDiffQuery(encodedDate)

    const {
        data: dataPredict,
        isLoading: isLoadingPredict,
        error: errorPredict,
    } = useMonthPredictQuery(encodedDate)

    const [existReport, setexistReport] = useState(false)
    useEffect(() => {
        console.log(
            'Month Report: \n',
            '‚úîÔ∏èdata: ',
            data,
            '‚úîÔ∏èisLoading:',
            isLoading,
            '‚úîÔ∏èerror: ',
            error,
        )
    }, [data, isLoading, error])
    useEffect(() => {
        console.log(
            'Month Report: \n',
            '‚≠ïdataMenu: ',
            dataMenu,
            '‚≠ïisLoadingMenu:',
            isLoadingMenu,
            '‚≠ïerrorMenu: ',
            errorMenu,
        )
    }, [dataMenu, isLoadingMenu, errorMenu])
    useEffect(() => {
        console.log(
            'Month Report: \n',
            'üíödataDiff: ',
            dataDiff,
            'üíöisLoadingDiff:',
            isLoadingDiff,
            'üíöerrorDiff: ',
            errorDiff,
        )
    }, [dataDiff, isLoadingDiff, errorDiff])

    useEffect(() => {
        console.log(
            'Month Report: \n',
            'üí´dataPredict: ',
            dataPredict,
            'üí´isLoadingPredict:',
            isLoadingPredict,
            'üí´errorPredict: ',
            errorPredict,
        )
    }, [dataPredict, isLoadingPredict, errorPredict])

    useEffect(() => {
        // dateÍ∞Ä Ïú†Ìö®Ìïú Í≤ΩÏö∞
        if (encodedDate) {
            // existReport ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
            if ((data && data.data.thisSales === 0) || error || errorMenu) {
                setexistReport(false)
            } else if (data && dataMenu) {
                setexistReport(true)
            }
        }
    }, [
        encodedDate,
        data,
        dataMenu,
        dataDiff,
        existReport,
        error,
        errorMenu,
        errorPredict,
    ])

    console.log('date: ', date, 'existReport:', existReport)

    if (isLoading || isLoadingMenu || isLoadingDiff || isLoadingPredict) {
        return (
            <div>
                <Loading dateRange={formattedDate} />
            </div>
        )
    }

    // Check if there is no data to display
    if (!existReport) {
        return (
            <div>
                <Empty dateRange={formattedDate} />
            </div>
        )
    }

    return (
        <div className="bg-gray-200">
            <section>
                <HEADER dateRange={formattedDate} />

                <Slider />
                <div id="#a1">
                    <Sales
                        lastwordOfDate={lastWord}
                        type={lastWord}
                        prevType={prevMonths[3] + 'Ïõî'}
                        sales={data.data.thisSales}
                        pastSales={data.data.previousSales}
                        diffSales={data.data.diffSales}
                    />
                </div>

                <div id="#a2">
                    {!isNowDate ? (
                        <></>
                    ) : (
                        <>
                            <DivisionLine />
                            <CompPredictSales
                                data={[
                                    {
                                        date: 'ÏòàÏÉÅ Îß§Ï∂ú',
                                        sales:
                                            Math.floor(
                                                dataPredict.data
                                                    .prePredictRevenue / 100,
                                            ) * 100,
                                    },
                                    {
                                        date: 'Ïã§Ï†ú Îß§Ï∂ú',
                                        sales: data.data.thisSales,
                                    },
                                ]}
                            />
                        </>
                    )}
                </div>

                <div id="#a3">
                    {!isNowDate ? (
                        <></>
                    ) : (
                        <>
                            <DivisionLine />
                            <PredictSales
                                type="Îã§ÏùåÎã¨"
                                data={[
                                    {
                                        date: `${prevMonths[0]}Îã¨`,
                                        sales: dataPredict.data
                                            .preRevenueList[0],
                                    },
                                    {
                                        date: `${prevMonths[1]}Îã¨`,
                                        sales: dataPredict.data
                                            .preRevenueList[1],
                                    },
                                    {
                                        date: `${prevMonths[2]}Îã¨`,
                                        sales: dataPredict.data
                                            .preRevenueList[2],
                                    },
                                    {
                                        date: `${prevMonths[3]}Îã¨`,
                                        sales: dataPredict.data
                                            .preRevenueList[3],
                                    },
                                    {
                                        date: 'Ïù¥Î≤àÎã¨',
                                        sales: data.data.thisSales,
                                    },
                                    {
                                        date: 'ÏòàÏÉÅ',
                                        sales:
                                            Math.floor(
                                                dataPredict.data
                                                    .nextPredictRevenue / 100,
                                            ) * 100,
                                    },
                                ]}
                            />
                        </>
                    )}
                </div>
                <div id="#a4">
                    <BestMenu type={lastWord} data={dataMenu} />
                </div>
                <div id="#a5">
                    <BiggestDiffMenu
                        type="ÏßÄÎÇúÎã¨"
                        data={dataDiff}
                        error={errorDiff}
                    />
                </div>
                <TopButton />
                <NAVBAR></NAVBAR>
            </section>
        </div>
    )
}

export default MonthReportPages
